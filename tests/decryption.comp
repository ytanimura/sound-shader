const float PI = 3.141592563;
vec2 mainSound(uint samp, float time) {
	vec2 sum = vec2(0);
	uint dftSampleRate = iChannelSampleRate0 / 10;
	uint idx = uint(float(iChannelSampleRate0) * time);
	uint baseIdx = idx - idx % dftSampleRate;
	for (uint i = 0u; i < dftSampleRate; i++) {
		vec2 dft = soundDFTFetch0(baseIdx + i);
		float phase = 2.0 * PI * float(idx % dftSampleRate) * float(i) / float(dftSampleRate);
		float c = cos(phase);
		float s = sin(phase);
		sum.x += dft.x * c - dft.y * s;
		sum.y += dft.y * c + dft.x * s;
	}
	return sum / float(dftSampleRate);
}